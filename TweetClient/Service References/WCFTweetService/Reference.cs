//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TweetClient.WCFTweetService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tweet", Namespace="http://schemas.datacontract.org/2004/07/TweetBL")]
    [System.SerializableAttribute()]
    public partial class Tweet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PostedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostedBy {
            get {
                return this.PostedByField;
            }
            set {
                if ((object.ReferenceEquals(this.PostedByField, value) != true)) {
                    this.PostedByField = value;
                    this.RaisePropertyChanged("PostedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFTweetService.ITweetService")]
    public interface ITweetService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITweetService/GetTweets", ReplyAction="http://tempuri.org/ITweetService/GetTweetsResponse")]
        TweetClient.WCFTweetService.Tweet[] GetTweets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITweetService/GetTweets", ReplyAction="http://tempuri.org/ITweetService/GetTweetsResponse")]
        System.Threading.Tasks.Task<TweetClient.WCFTweetService.Tweet[]> GetTweetsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITweetService/GetTweetByID", ReplyAction="http://tempuri.org/ITweetService/GetTweetByIDResponse")]
        TweetClient.WCFTweetService.Tweet GetTweetByID(int tweetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITweetService/GetTweetByID", ReplyAction="http://tempuri.org/ITweetService/GetTweetByIDResponse")]
        System.Threading.Tasks.Task<TweetClient.WCFTweetService.Tweet> GetTweetByIDAsync(int tweetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITweetService/CreateTweet", ReplyAction="http://tempuri.org/ITweetService/CreateTweetResponse")]
        void CreateTweet(TweetClient.WCFTweetService.Tweet newTweet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITweetService/CreateTweet", ReplyAction="http://tempuri.org/ITweetService/CreateTweetResponse")]
        System.Threading.Tasks.Task CreateTweetAsync(TweetClient.WCFTweetService.Tweet newTweet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITweetService/UpdateTweet", ReplyAction="http://tempuri.org/ITweetService/UpdateTweetResponse")]
        void UpdateTweet([System.ServiceModel.MessageParameterAttribute(Name="updateTweet")] TweetClient.WCFTweetService.Tweet updateTweet1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITweetService/UpdateTweet", ReplyAction="http://tempuri.org/ITweetService/UpdateTweetResponse")]
        System.Threading.Tasks.Task UpdateTweetAsync(TweetClient.WCFTweetService.Tweet updateTweet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITweetService/DeleteTweet", ReplyAction="http://tempuri.org/ITweetService/DeleteTweetResponse")]
        void DeleteTweet(int deleteTweetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITweetService/DeleteTweet", ReplyAction="http://tempuri.org/ITweetService/DeleteTweetResponse")]
        System.Threading.Tasks.Task DeleteTweetAsync(int deleteTweetId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITweetServiceChannel : TweetClient.WCFTweetService.ITweetService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TweetServiceClient : System.ServiceModel.ClientBase<TweetClient.WCFTweetService.ITweetService>, TweetClient.WCFTweetService.ITweetService {
        
        public TweetServiceClient() {
        }
        
        public TweetServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TweetServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TweetServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TweetServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TweetClient.WCFTweetService.Tweet[] GetTweets() {
            return base.Channel.GetTweets();
        }
        
        public System.Threading.Tasks.Task<TweetClient.WCFTweetService.Tweet[]> GetTweetsAsync() {
            return base.Channel.GetTweetsAsync();
        }
        
        public TweetClient.WCFTweetService.Tweet GetTweetByID(int tweetId) {
            return base.Channel.GetTweetByID(tweetId);
        }
        
        public System.Threading.Tasks.Task<TweetClient.WCFTweetService.Tweet> GetTweetByIDAsync(int tweetId) {
            return base.Channel.GetTweetByIDAsync(tweetId);
        }
        
        public void CreateTweet(TweetClient.WCFTweetService.Tweet newTweet) {
            base.Channel.CreateTweet(newTweet);
        }
        
        public System.Threading.Tasks.Task CreateTweetAsync(TweetClient.WCFTweetService.Tweet newTweet) {
            return base.Channel.CreateTweetAsync(newTweet);
        }
        
        public void UpdateTweet(TweetClient.WCFTweetService.Tweet updateTweet1) {
            base.Channel.UpdateTweet(updateTweet1);
        }
        
        public System.Threading.Tasks.Task UpdateTweetAsync(TweetClient.WCFTweetService.Tweet updateTweet) {
            return base.Channel.UpdateTweetAsync(updateTweet);
        }
        
        public void DeleteTweet(int deleteTweetId) {
            base.Channel.DeleteTweet(deleteTweetId);
        }
        
        public System.Threading.Tasks.Task DeleteTweetAsync(int deleteTweetId) {
            return base.Channel.DeleteTweetAsync(deleteTweetId);
        }
    }
}
